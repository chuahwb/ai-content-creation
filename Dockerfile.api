# Multi-stage build for Python API
FROM python:3.11-slim AS base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Production dependencies stage
FROM base AS prod-deps
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy and install production dependencies only
COPY pyproject.toml README.md ./
RUN pip install --no-cache-dir -e . && \
    # Remove build tools after installation
    apt-get remove -y build-essential && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Development dependencies stage  
FROM base AS dev-deps
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy and install all dependencies including dev
COPY pyproject.toml README.md ./
RUN pip install --no-cache-dir -e .[dev]

# Production stage
FROM base AS production

# Create non-root user first
RUN adduser --disabled-password --gecos '' appuser

# Copy installed packages from production deps stage only
COPY --from=prod-deps /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=prod-deps /usr/local/bin /usr/local/bin

# Set working directory
WORKDIR /app

# Copy only necessary source code
COPY churns/ ./churns/

# Create minimal data directory structure (don't copy actual data)
RUN mkdir -p ./data/runs && chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Production command (no reload)
CMD ["uvicorn", "churns.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]

# Development stage
FROM dev-deps AS development

# Set working directory
WORKDIR /app

# Copy source code
COPY churns/ ./churns/

# Create data directory
RUN mkdir -p ./data

# Create non-root user and set permissions
RUN adduser --disabled-password --gecos '' appuser && chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 8000

# Development command (with reload)
CMD ["uvicorn", "churns.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"] 